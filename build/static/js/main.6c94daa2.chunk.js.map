{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","fontSize","cardGrid","paddingTop","paddingBottom","display","justifyContent","card","height","flexDirection","cardMedia","cardContent","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","classes","useState","campaigns","setCampaigns","useEffect","axios","get","then","res","data","console","log","catch","error","Fragment","CssBaseline","AppBar","position","Toolbar","className","Container","maxWidth","Typography","component","variant","align","color","gutterBottom","paragraph","Grid","container","item","xs","sm","md","Card","CardMedia","image","title","CardContent","name","goal","CardActions","Button","size","href","url","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yUAiBMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,YAAaF,EAAMG,QAAQ,IAE7BC,YAAa,CACXC,gBAAiBL,EAAMM,QAAQC,WAAWC,MAC1CC,QAAST,EAAMG,QAAQ,EAAG,EAAG,GAC7BO,SAAU,QAEZC,SAAU,CACRC,WAAYZ,EAAMG,QAAQ,GAC1BU,cAAeb,EAAMG,QAAQ,GAC7BW,QAAS,OACTC,eAAgB,UAElBC,KAAM,CACJC,OAAQ,OACRH,QAAS,OACTI,cAAe,UAEjBC,UAAW,CACTP,WAAY,UAEdQ,YAAa,CACXC,SAAU,OC7BMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFuCD,WACb,IAAMC,EAAU/B,IADgB,EAGEgC,mBAAS,IAHX,mBAGzBC,EAHyB,KAGdC,EAHc,KAehC,OAVAC,qBAAU,WACRC,IAAMC,IAAI,oFAAoFC,MAAK,SAACC,GAClGL,EAAaK,EAAIC,KAAKA,MACtBC,QAAQC,IAAIT,MAEXU,OAAM,SAAUC,GACfH,QAAQC,IAAIE,QAEf,IAGD,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,YACf,kBAACC,EAAA,EAAD,OAIF,8BAEE,yBAAKC,UAAWnB,EAAQzB,aACtB,kBAAC6C,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAKC,MAAM,SAASC,MAAM,cAAcC,cAAY,GAAvF,kBAGA,kBAACL,EAAA,EAAD,CAAYH,UAAWnB,EAAQzB,YAAaiD,QAAQ,KAAKC,MAAM,OAAOC,MAAM,gBAAgBE,WAAS,GAArG,MACK,mGADL,IACmF,0IADnF,OACuM,6BAAM,6BAD7M,MAEK,wFAFL,IAEwE,gFAFxE,OAE+H,6BAAM,6BAFrI,MAGK,8KAHL,OAGyJ,0ZAHzJ,IAG0hB,6BAAM,6BAHhiB,MAIK,2KAJL,IAI2J,0YAK/J,kBAACR,EAAA,EAAD,CAAWD,UAAWnB,EAAQlB,SAAUuC,SAAS,MAE/C,kBAACQ,EAAA,EAAD,CAAMV,UAAWnB,EAAQlB,SAAUgD,WAAS,EAACxD,QAAS,GAEpD,kBAACuD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAACC,EAAA,EAAD,CAAMhB,UAAWnB,EAAQb,MACvB,kBAACiD,EAAA,EAAD,CACEjB,UAAWnB,EAAQV,UACnB+C,MAAM,qCACNC,MAAM,gBAER,kBAACC,EAAA,EAAD,CAAapB,UAAWnB,EAAQT,aAC9B,kBAAC+B,EAAA,EAAD,CAAYK,cAAY,EAACH,QAAQ,KAAKD,UAAU,MAC7CrB,EAAUsC,KACX,6BAFF,SAGStC,EAAUuC,MAEnB,kBAACnB,EAAA,EAAD,mDAIF,kBAACoB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQlB,MAAM,WACzB,uBAAGmB,KAAM3C,EAAU4C,KAAnB,4BErGJ,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.6c94daa2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nimport axios from 'axios';\n\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n    fontSize: '1rem'\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Raisely() {\n  const classes = useStyles();\n\n  const [campaigns, setCampaigns] = useState([]);\n\n  useEffect(() => {\n    axios.get('https://api.raisely.com/v3/campaigns/raisely-pk-8c047df67a79692b5eb4e0afccee9b06').then((res) => {\n      setCampaigns(res.data.data);\n      console.log(campaigns);\n    })\n      .catch(function (error) {\n        console.log(error);\n      })\n  }, []);\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n\n        </Toolbar>\n      </AppBar>\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Raisely layout\n            </Typography>\n            <Typography className={classes.heroContent} variant=\"h5\" align=\"left\" color=\"textSecondary\" paragraph>\n              1. <strong>Why would you be a good fit for the Campaign Developer role?</strong> <em>I have nearly a decade of experience as a freelance web developer/designer working across multiple genres.</em> <br /><br />\n              2. <strong>Why do you want to work here over somewhere else?</strong> <em>Remote and actually working for a good cause.</em> <br /><br />\n              3. <strong>Look at this list of tasks and tell us which two you are excited by, which two you want to learn and the two you don’t want to do.</strong> <em> I would like to learn how to customize a raisely pre-built theme and run SQL reports. I'm excited about all of them, but the main two are helping customers create rapid-response campaigns to a current crisis and building custom themes on Raisely with sass and javascript. The two things I would probably shy away from is looking at SQL spreadsheets and running SQL reports. </em> <br /><br />\n              4. <strong>Tell us about a platform you believe has solved a complex problem really well, and why. Would you change anything in their approach?</strong> <em>I believe Tandem.chat has solved a complex problem with companies and remote worker collaboration.  It's easy for communications and important notes to fall through the cracks when everyone is not in the same office, but this company has made it seamless to collaborate real-time from anywhere about anything. I would not change anything in their approach.</em>\n            </Typography>\n\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid className={classes.cardGrid} container spacing={4}>\n\n            <Grid item xs={12} sm={6} md={4}>\n              <Card className={classes.card}>\n                <CardMedia\n                  className={classes.cardMedia}\n                  image=\"https://source.unsplash.com/random\"\n                  title=\"Image title\"\n                />\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    {campaigns.name}\n                    <br />\n                    Goal: {campaigns.goal}\n                  </Typography>\n                  <Typography>\n                    This is a demo campaign from Raisely API.\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button size=\"small\" color=\"primary\">\n                    <a href={campaigns.url}>Visit Campaign</a>\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n\n          </Grid>\n        </Container>\n      </main>\n\n    </React.Fragment >\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}